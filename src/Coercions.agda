open import Level using (_‚äî_)
open import Algebra.Ordered using (Promonoid)
import Data.List.Relation.Binary.Sublist.Setoid as Sublist
open import Relation.Binary using (Preorder)
import Relation.Binary.PropositionalEquality as PropEq

-- Subtyping coercions are parametrized by
--
--  * a preordered set of base types,
--  * a preordered monoid of effects.
--
-- These two preorders generate the subtyping relation.

module Coercions {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}
                 (Base    : Preorder c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ)
                 (Effects : Promonoid c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ)
                 where

open import Types Base Effects

infix 4 _<:_ _‚â™:_

-- Declarative subtyping is a binary relation over types.
--
-- Alternative interpretation: the intrinsically typed syntax of
-- subtyping coercions `Œ± : a <: b` between types `a` and `b`.

data _<:_ : Tp ‚Üí Tp ‚Üí Set (c ‚äî ‚Ñì‚ÇÇ) where

  coe : ‚àÄ {i j}
      ‚Üí i ‚â§ j
        ------------
      ‚Üí bs i <: bs j

         ------------
  unit : unit <: unit


  _‚áí_ : ‚àÄ {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ}
      ‚Üí a‚ÇÇ <: a‚ÇÅ
      ‚Üí b‚ÇÅ <: b‚ÇÇ
        ------------------
      ‚Üí a‚ÇÅ ‚áí b‚ÇÅ <: a‚ÇÇ ‚áí b‚ÇÇ
 
  _ùï©_ : ‚àÄ {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ}
      ‚Üí a‚ÇÅ <: a‚ÇÇ
      ‚Üí b‚ÇÅ <: b‚ÇÇ
        ------------------
      ‚Üí a‚ÇÅ ùï© b‚ÇÅ <: a‚ÇÇ ùï© b‚ÇÇ

  ‚ü®_‚ü©_ : ‚àÄ {e‚ÇÅ e‚ÇÇ a‚ÇÅ a‚ÇÇ}
       ‚Üí e‚ÇÅ ‚äë e‚ÇÇ
       ‚Üí a‚ÇÅ <: a‚ÇÇ
         ----------------------
       ‚Üí ‚ü® e‚ÇÅ ‚ü© a‚ÇÅ <: ‚ü® e‚ÇÇ ‚ü© a‚ÇÇ

  refl : ‚àÄ {a}
         ------
       ‚Üí a <: a

  trans : ‚àÄ {a‚ÇÅ a‚ÇÇ a‚ÇÉ}
        ‚Üí a‚ÇÅ <: a‚ÇÇ
        ‚Üí a‚ÇÇ <: a‚ÇÉ
          --------
        ‚Üí a‚ÇÅ <: a‚ÇÉ


-- Two notions of context morphism, one allowing only weakening, the
-- other including subtyping.

-- Order Preserving Embeddings (OPEs)
--
-- NOTE: we are reusing support for sublists from the standard library
-- to implement OPEs here, but change the direction of the relation to
-- adopt the usual order on contexts: given contexts Œì and Œî
--
--   Œì ‚äÜ Œî   iff   everything that can be typed in Œî can be typed in Œì
-- 
-- This also ensures that our terminology stays consistent with the
-- usual interpretation of presheafs as contravariant functors.

open Sublist (PropEq.setoid Tp) public renaming
  ( _‚äÜ_ to _‚äá_    -- OPEs are the inverse of the sublist relation

  -- Constructors/rules
  ; _‚à∑ ≥_ to _‚à∑À°_  -- weakening (dropping a variable on the left)

  -- Order-theoretic properties

  ; ‚äÜ-refl  to ‚äá-refl   -- reflexivity
  ; ‚äÜ-trans to ‚äá-trans  -- transitivity
  )

  using
 
  -- Constructors/rules

  ( []   -- empty contexts are related
  ; _‚à∑_  -- context extensions are related

  -- Generalized lookup
  ; lookup
  )

-- OPEs are the inverse of the sublist relation

_‚äÜ_ : Ctx ‚Üí Ctx ‚Üí Set c
Œì ‚äÜ Œî = Œî ‚äá Œì

‚äÜ-refl : ‚àÄ {Œì} ‚Üí Œì ‚äÜ Œì
‚äÜ-refl = ‚äá-refl

‚äÜ-trans : ‚àÄ {Œì Œî E} ‚Üí Œì ‚äÜ Œî ‚Üí Œî ‚äÜ E ‚Üí Œì ‚äÜ E
‚äÜ-trans Œ¶ Œ® = ‚äá-trans Œ® Œ¶

-- Subtyping lifted pointwise to context, combined with OPEs
--
-- Alternative interpretation: the intrinsically typed syntax of
-- context morphisms `Œ¶ : Œì ‚â™: Œî` between contexts `Œì` and `Œî`.
--
-- FIXME: is this ever used?

data _‚â™:_ : Ctx ‚Üí Ctx ‚Üí Set (c ‚äî ‚Ñì‚ÇÇ) where

       ---------
  [] : [] ‚â™: []
  
  _‚à∑_ : ‚àÄ {a b Œì Œî}
      ‚Üí a <: b
      ‚Üí Œì ‚â™: Œî
        ---------------
      ‚Üí a ‚à∑ Œì ‚â™: b ‚à∑ Œî

  _‚à∑À°_ : ‚àÄ a {Œì Œî}
       ‚Üí Œì ‚â™: Œî
         -----------
       ‚Üí a ‚à∑ Œì ‚â™: Œî
