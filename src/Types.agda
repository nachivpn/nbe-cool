open import Algebra.Ordered using (Promonoid)
open import Data.List using (List)
open import Relation.Binary using (Preorder)

-- The syntax of types is parametrized by
--
--  * a preordered set of base types,
--  * a promonoid of effects.

module Types {c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}
             (Base    : Preorder c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ)
             (Effects : Promonoid c ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ)
             where

-- Shorthands for easier access to the preorders

module Bs  = Preorder  Base
module Eff = Promonoid Effects

open Bs  public using ()       renaming (Carrier to Bs;  _‚àº_ to _‚â§_)
open Eff public using (Œµ; _‚àô_) renaming (Carrier to Eff; _‚àº_ to _‚äë_)

infixr 7 _‚áí_
infixl 8 _ùï©_
infixr 9 ‚ü®_‚ü©_

-- The syntax of simple types

data Tp : Set c where
  bs   : (i : Bs)           ‚Üí Tp   -- base types
  unit :                      Tp   -- unit type
  _ùï©_  : (a b : Tp)         ‚Üí Tp   -- product type
  _‚áí_  : (a b : Tp)         ‚Üí Tp   -- function type
  ‚ü®_‚ü©_ : (e : Eff) (a : Tp) ‚Üí Tp   -- graded monad


-- Contexts are just ordered sequences of types.

Ctx : Set c
Ctx = List Tp

open List public using ([]; _‚à∑_)
